{"version":3,"sources":["components/Nav.js","actions/index.js","components/Item.js","pages/ItemListContainer.js","components/Toast.js","components/NotificationCenter.js","components/CartItem.js","components/OrderSummary.js","pages/ShoppingCart.js","App.js","reducers/initialState.js","reducers/itemReducer.js","reducers/notificationReducer.js","reducers/index.js","store/store.js","serviceWorker.js","index.js"],"names":["Nav","state","useSelector","itemReducer","id","src","alt","to","cartItems","length","ADD_TO_CART","REMOVE_FROM_CART","SET_QUANTITY","ENQUEUE_NOTIFICATION","DEQUEUE_NOTIFICATION","notify","message","dismissTime","dispatch","uuid","Math","random","enqueueNotification","setTimeout","dequeueNotification","type","payload","Item","item","handleClick","className","img","name","data-testid","price","onClick","e","ItemListContainer","items","useDispatch","itemId","map","el","includes","quantity","idx","Toast","text","useState","isFading","setIsFading","useEffect","mounted","NofiticationCenter","notificationReducer","notifications","n","CartItem","checkedItems","handleCheckChange","handleQuantityChange","handleDelete","onChange","target","checked","min","value","Number","OrderSummary","totalQty","total","alert","window","location","href","ShoppingCart","setCheckedItems","filter","setQuantity","removeFromCart","renderItems","indexOf","cartIdArr","i","getTotal","App","exact","path","NotificationCenter","initialState","action","Object","assign","newCartItem","Element","findIndex","slice","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2961eae9.chunk.js","sourcesContent":["import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { BrowserRouter } from \"react-router-dom/cjs/react-router-dom.min\";\n\nfunction Nav() {\n  const state = useSelector((state) => state.itemReducer);\n\n  return (\n    <div id=\"nav-body\">\n      <span id=\"title\">\n        <img\n          id=\"logo\"\n          src=\"https://jcafebucket.s3.ap-northeast-2.amazonaws.com/JayLogo.png\"\n          alt=\"logo\"\n        />\n        <Link to=\"/new-cmarket-redux\">\n          <span id=\"name\">J Cafe</span>\n        </Link>\n      </span>\n      <div id=\"menu\">\n        {/* <BrowserRouter> */}\n        <Link to=\"/new-cmarket-redux\">Menus</Link>\n        <Link to=\"/new-cmarket-redux/shoppingcart\">\n          Cart Items\n          <span id=\"nav-item-counter\">{state.cartItems.length}</span>\n        </Link>\n        {/* </BrowserRouter> */}\n      </div>\n    </div>\n  );\n}\n\nexport default Nav;\n","// action types\nexport const ADD_TO_CART = \"ADD_TO_CART\";\nexport const REMOVE_FROM_CART = \"REMOVE_FROM_CART\";\nexport const SET_QUANTITY = \"SET_QUANTITY\";\nexport const NOTIFY = \"NOTIFY\";\nexport const ENQUEUE_NOTIFICATION = \"ENQUEUE_NOTIFICATION\";\nexport const DEQUEUE_NOTIFICATION = \"DEQUEUE_NOTIFICATION\";\n\n// actions creator functions\n//! 아래 액션들을 어딘가에서 호출하고 id 나 수량 등을 전달해줘야 할 것 같다.\n//! 이하 동기적인 액션 함수 \nexport const addToCart = (itemId) => {\n  return {\n    type: ADD_TO_CART,\n    payload: {\n      itemId: itemId,\n      quantity: 1,\n    },\n  };\n};\n\nexport const removeFromCart = (itemId) => {\n  return {\n    //TODO\n    type: REMOVE_FROM_CART,\n    payload: {\n      itemId: itemId,\n    },\n  };\n};\n\nexport const setQuantity = (itemId, quantity) => {\n  return {\n    //TODO\n    type: SET_QUANTITY,\n    payload: {\n      itemId: itemId,\n      quantity: quantity,\n    },\n  };\n};\n\n// !const rootReducer = combineReducers({\n// !  itemReducer,\n// !  notificationReducer\n// !});\n\n//! 이하 비동기적인 액션 함수 \nexport const notify = (message, dismissTime = 5000) => (dispatch) => {\n  const uuid = Math.random();\n  //! 비동기 함수인 notify 는 비동기 상황을 구현한 뒤 dispatch를 통해 다른 동기 액션을 호출한다.\n  //! 여기서 다른 동기 액션이란 enqueueNotification, dequeueNotification\n  //! dispatch 의 return 값을 notificationReducer 에 전달한다.\n  dispatch(enqueueNotification(message, dismissTime, uuid));\n  //! 5초가 지난 후 callback 실행하여 dequeueNotification 의 리턴값을 reducer 에 전달.\n  setTimeout(() => {\n    dispatch(dequeueNotification());\n  }, dismissTime);\n};\n\nexport const enqueueNotification = (message, dismissTime, uuid) => {\n  return {\n    type: ENQUEUE_NOTIFICATION,\n    payload: {\n      message,\n      dismissTime,\n      uuid,\n    },\n  };\n};\n\nexport const dequeueNotification = () => {\n  return {\n    type: DEQUEUE_NOTIFICATION,\n  };\n};\n\n","import React from 'react'\n\nexport default function Item({ item, handleClick }) {\n\n  return (\n    <div key={item.id} className=\"item\">\n      <img className=\"item-img\" src={item.img} alt={item.name}></img>\n      <span className=\"item-name\" data-testid={item.name}>{item.name}</span>\n      <span className=\"item-price\">{item.price}</span>\n      <button className=\"item-button\" onClick={(e) => handleClick(e, item.id)}>장바구니 담기</button>\n    </div>\n  )\n}\n","import React, { useCallback } from \"react\";\nimport { addToCart, notify } from \"../actions/index\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Item from \"../components/Item\";\n\nfunction ItemListContainer() {\n  const state = useSelector((state) => state.itemReducer);\n  const { items, cartItems } = state;\n  const dispatch = useDispatch();\n\n  //! action addToCart\n  //! dispatch : action 을 전달하는 메소드. dispatch 의 인자로 action 객체가 전달된다.\n  //! reducer 를 호출하여 state 의 값을 바꾼다.\n  const handleClick = (item) => {\n    // console.log(state);\n    if (!cartItems.map((el) => el.itemId).includes(item.id)) {\n      //TODO: dispatch 함수를 호출하여 아이템 추가에 대한 액션을 전달하세요.\n      dispatch(addToCart(item.id));\n      dispatch(notify(`장바구니에 ${item.name} 가 추가되었습니다.`));\n    } else {\n      dispatch(notify(\"이미 추가된 상품입니다.\"));\n    }\n  };\n\n  return (\n    <div id=\"item-list-container\">\n      <div id=\"item-list-body\">\n        <div id=\"item-list-title\">Coffee Menus</div>\n        {items.map((item, idx) => (\n          <Item\n            item={item}\n            key={idx}\n            handleClick={() => {\n              handleClick(item);\n            }}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default ItemListContainer;\n","import React, { useEffect, useState } from \"react\";\n\n/*//! <Toast key={n.uuid} text={n.message} dismissTime={n.dismissTime} />\n\n{\n  message,\n  dismissTime,\n  uuid,\n}, \n*/\n\nexport default function Toast({ text, dismissTime }) {\n  const [isFading, setIsFading] = useState(false);\n\n  //? useEffect 은 componentDidMount와 componentDidUpdate, componentWillUnmount가 합쳐진 것\n  //? 으로 이해하면 좋다. useEffect를 컴포넌트 내부에 둠으로써 effect를 통해 count state 변수(또는 그 어떤 prop에도)에\n  //? 접근할 수 있게 됩니다. 함수 범위 안에 존재하기 때문에 특별한 API 없이도 값을 얻을 수 있는 것입니다.\n  useEffect(() => {\n    let mounted = true;\n    //! 5000-500 = 4500. 4.5초 이후에 isFading 을 true 로 최신화 한다.\n    //! div 의 클래스이름에 fade-out 이 생겨 CSS의 사라지는 효과가 실행된다.\n    setTimeout(() => {\n      if (mounted) {\n        setIsFading(true);\n      }\n    }, dismissTime - 500);\n\n    return () => {\n      mounted = false;\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  \n  return (\n    <div className={`notification ${isFading ? \"fade-out\" : \"\"}`}>{text}</div>\n    );\n  }\n  \n  //! CSS 부분\n  // .fade-out {\n  //   opacity: 0;\n  //   transform: opacity 2s;\n  // }/\n  //! className fade-out 이 추가되면 2초 동안 opacity를 0으로 만든다.","import { useSelector } from \"react-redux\";\nimport Toast from \"./Toast\";\n//! Toast 로부터 dismisstime 을 받는다.\nfunction NofiticationCenter() {\n  //! notificationReducer 로 데이터가 최신화되었기 때문에 state.notificationReducer 로 데이터를 가져온다.\n  const state = useSelector((state) => state.notificationReducer);\n  // console.log(state);\n  return (\n    <div className=\"notification-container top-right\">\n      {state.notifications.map((n) => (\n        <Toast key={n.uuid} text={n.message} dismissTime={n.dismissTime} />\n      ))}\n    </div>\n  );\n}\n\nexport default NofiticationCenter;\n","import React from \"react\";\n\nexport default function CartItem({\n  item,\n  checkedItems,\n  handleCheckChange,\n  handleQuantityChange,\n  handleDelete,\n  quantity,\n}) {\n  return (\n    <li className=\"cart-item-body\">\n      <input\n        type=\"checkbox\"\n        className=\"cart-item-checkbox\"\n        onChange={(e) => {\n          handleCheckChange(e.target.checked, item.id);\n        }}\n        checked={checkedItems.includes(item.id) ? true : false}\n      ></input>\n      <div className=\"cart-item-thumbnail\">\n        <img src={item.img} alt={item.name} />\n      </div>\n      <div className=\"cart-item-info\">\n        <div className=\"cart-item-title\" data-testid={`cart-${item.name}`}>\n          {item.name}\n        </div>\n        <div className=\"cart-item-price\">{item.price} 원</div>\n      </div>\n      <input\n        type=\"number\"\n        min={1} //이게 없으면 0 과 음수까지 내려갈 수 있다.\n        className=\"cart-item-quantity\"\n        value={quantity} //초기값 설정\n        onChange={(e) => {\n          // console.log(e.target.value);\n          handleQuantityChange(Number(e.target.value), item.id);\n        }}\n      ></input>\n      <button\n        className=\"cart-item-delete\"\n        onClick={() => {\n          handleDelete(item.id);\n        }}\n      >\n        삭제\n      </button>\n    </li>\n  );\n}\n","import React from \"react\";\n\nexport default function OrderSummary({ totalQty, total }) {\n  const payment = () => {\n    const totalPrice = total;\n    if (totalPrice === 0) {\n      alert(\"장바구니에 커피를 담아주세요\");\n      return;\n    }\n    alert(`총 ${total} 원 결제되었습니다. 잠시만 기다려주세요 :)`);\n    window.location.href = \"/\";\n  };\n\n  return (\n    <div id=\"order-summary-container\">\n      <h4>주문 합계</h4>\n      <div id=\"order-summary\">\n        총 아이템 개수 :{\" \"}\n        <span className=\"order-summary-text\">{totalQty} 개</span>\n        <hr></hr>\n        <div id=\"order-summary-total\">\n          합계 : <span className=\"order-summary-text\">{total} 원</span>\n        </div>\n      </div>\n      <div id=\"btnWrap\">\n        <button id=\"pay\" onClick={payment}>\n          결제하기\n        </button>\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { removeFromCart, setQuantity } from \"../actions\";\nimport CartItem from \"../components/CartItem\";\nimport OrderSummary from \"../components/OrderSummary\";\n\n//! useSelector 와 userDispatch 를 어떤 컴포넌트에 사용해야 하는지?\nexport default function ShoppingCart() {\n  const state = useSelector((state) => state.itemReducer);\n  //const itemReducer = (state = initialState, action) => {\n  //itemReducer 의 결과값이 state 로 저장된다.\n  const { cartItems, items } = state;\n  const dispatch = useDispatch();\n  const [checkedItems, setCheckedItems] = useState(\n    cartItems.map((el) => el.itemId)\n  );\n\n  const handleCheckChange = (checked, id) => {\n    if (checked) {\n      setCheckedItems([...checkedItems, id]);\n    } else {\n      setCheckedItems(checkedItems.filter((el) => el !== id));\n    }\n  };\n\n  const handleAllCheck = (checked) => {\n    if (checked) {\n      setCheckedItems(cartItems.map((el) => el.itemId));\n    } else {\n      setCheckedItems([]);\n    }\n  };\n  //! action setQuantity\n  const handleQuantityChange = (quantity, itemId) => {\n    //TODO: dispatch 함수를 호출하여 액션을 전달하세요.\n    //! Dispatch() 는 Action 객체(return값)를 Reducer 로 전달해주는 메소드.\n    // console.log(quantity);\n    // console.log(itemId);\n    dispatch(setQuantity(itemId, quantity));\n  };\n  //! action removeFromCart\n  const handleDelete = (itemId) => {\n    // console.log(itemId);\n    setCheckedItems(checkedItems.filter((el) => el !== itemId));\n    dispatch(removeFromCart(itemId));\n    //TODO: dispatch 함수를 호출하여 액션을 전달하세요.\n  };\n\n  const getTotal = () => {\n    let cartIdArr = cartItems.map((el) => el.itemId);\n    let total = {\n      price: 0,\n      quantity: 0,\n    };\n    for (let i = 0; i < cartIdArr.length; i++) {\n      if (checkedItems.indexOf(cartIdArr[i]) > -1) {\n        let quantity = cartItems[i].quantity;\n        let price = items.filter((el) => el.id === cartItems[i].itemId)[0]\n          .price;\n\n        total.price = total.price + quantity * price;\n        total.quantity = total.quantity + quantity;\n      }\n    }\n    return total;\n  };\n\n  const renderItems = items.filter(\n    (el) => cartItems.map((el) => el.itemId).indexOf(el.id) > -1\n  );\n  const total = getTotal();\n\n  return (\n    <div id=\"item-list-container\">\n      <div id=\"item-list-body\">\n        <div id=\"item-list-title\">장바구니</div>\n        <span id=\"shopping-cart-select-all\">\n          <input\n            type=\"checkbox\"\n            checked={checkedItems.length === cartItems.length ? true : false}\n            onChange={(e) => handleAllCheck(e.target.checked)}\n          ></input>\n          <label>전체선택</label>\n        </span>\n        <div id=\"shopping-cart-container\">\n          {!cartItems.length ? (\n            <div id=\"item-list-text\">장바구니에 아이템이 없습니다.</div>\n          ) : (\n            <div id=\"cart-item-list\">\n              {renderItems.map((item, idx) => {\n                const quantity = cartItems.filter(\n                  (el) => el.itemId === item.id\n                )[0].quantity;\n                return (\n                  <CartItem\n                    key={idx}\n                    handleCheckChange={handleCheckChange}\n                    handleQuantityChange={handleQuantityChange}\n                    handleDelete={handleDelete}\n                    item={item}\n                    checkedItems={checkedItems}\n                    quantity={quantity}\n                  />\n                );\n              })}\n            </div>\n          )}\n          <OrderSummary total={total.price} totalQty={total.quantity} />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\r\nimport Nav from \"./components/Nav\";\r\nimport ItemListContainer from \"./pages/ItemListContainer\";\r\nimport NotificationCenter from \"./components/NotificationCenter\";\r\nimport \"./App.css\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport ShoppingCart from \"./pages/ShoppingCart\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Nav />\r\n      <Switch>\r\n        <Route exact={true} path=\"/new-cmarket-redux\">\r\n          <ItemListContainer />\r\n        </Route>\r\n        <Route path=\"/new-cmarket-redux/shoppingcart\">\r\n          <ShoppingCart />\r\n        </Route>\r\n      </Switch>\r\n      <NotificationCenter />\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","export const initialState = {\n  items: [\n    {\n      id: 1,\n      name: \"플랫 화이트\",\n      img: \"https://jcafebucket.s3.ap-northeast-2.amazonaws.com/flatWhite.png\",\n      price: 4000,\n    },\n    {\n      id: 2,\n      name: \"아메리카노\",\n      img: \"https://jcafebucket.s3.ap-northeast-2.amazonaws.com/americano.png\",\n      price: 4500,\n    },\n    {\n      id: 3,\n      name: \"에스프레소\",\n      img: \"https://jcafebucket.s3.ap-northeast-2.amazonaws.com/espresso.png\",\n      price: 4000,\n    },\n    {\n      id: 4,\n      name: \"카푸치노\",\n      img: \"https://jcafebucket.s3.ap-northeast-2.amazonaws.com/cappuccino.png\",\n      price: 5000,\n    },\n    {\n      id: 5,\n      name: \"콘 파나\",\n      img: \"https://jcafebucket.s3.ap-northeast-2.amazonaws.com/conPanna.png\",\n      price: 5500,\n    },\n\n    {\n      id: 6,\n      name: \"모카\",\n      img: \"https://jcafebucket.s3.ap-northeast-2.amazonaws.com/mocha.png\",\n      price: 5000,\n    },\n    {\n      id: 7,\n      name: \"카라멜 마끼아또\",\n      img:\n        \"https://jcafebucket.s3.ap-northeast-2.amazonaws.com/caramelMacchiato.png\",\n      price: 5500,\n    },\n    {\n      id: 8,\n      name: \"마끼아또\",\n      img: \"https://jcafebucket.s3.ap-northeast-2.amazonaws.com/macchiato.png\",\n      price: 5500,\n    },\n    {\n      id: 9,\n      name: \"테이크어웨이\",\n      img: \"https://jcafebucket.s3.ap-northeast-2.amazonaws.com/takeAway.png\",\n      price: 2500,\n    },\n  ],\n  cartItems: [\n    // {\n    //   itemId: 1,\n    //   quantity: 1,\n    // },\n    // {\n    //   itemId: 5,\n    //   quantity: 7,\n    // },\n    // {\n    //   itemId: 2,\n    //   quantity: 3,\n    // },\n  ],\n  notifications: [],\n};\n","import { act } from \"react-dom/test-utils\";\nimport { REMOVE_FROM_CART, ADD_TO_CART, SET_QUANTITY } from \"../actions/index\";\nimport { initialState } from \"./initialState\";\n\n//! initialState(데이터) 를 가져옴.\n//! action 이라는 것은 따로 import 를 안해도 되는 건가?\nconst itemReducer = (state = initialState, action) => {\n  //! action 의 type(ADD_TO_CART 등) 에 따라서 특정 동작을 수행한다. => 특정 동작? state 를 변경해주는 것.\n  //! type 과 payload(quantity, id) 등을 받아와 아래 동작을 수행.\n  switch (action.type) {\n    case ADD_TO_CART:\n      //TODO\n      //? 맨 앞에 빈 객체를 둔 이유? 다른 주소값을 가진 객체를 만들기 위함.\n      //? 주소 값이 바뀌어야 리액트가 데이터가 변경 되었다고 인식하고 리렌더를 한다.\n      return Object.assign({}, state, {\n        cartItems: [...state.cartItems, action.payload],\n      });\n\n    case REMOVE_FROM_CART:\n      //TODO\n      //! action.payload.itemId = 번호.\n      let newCartItem = state.cartItems.filter(\n        (Element) => Element.itemId !== action.payload.itemId\n      );\n      return Object.assign({}, state, {\n        cartItems: newCartItem,\n      });\n\n    case SET_QUANTITY:\n      //TODO\n      //! test case 에서는 payload를 return 안에 넣어서 문제를 해결하길 바란다.\n      let idx = state.cartItems.findIndex(\n        (el) => el.itemId === action.payload.itemId\n      );\n\n      return Object.assign({}, state, {\n        //! shallow copy 를 해야 원본 손실이 발생하지 않는다.\n        //! immutability 를 위해, shallow copy 한다.\n        cartItems: [\n          ...state.cartItems.slice(0, idx),\n          action.payload,\n          ...state.cartItems.slice(idx + 1),\n        ],\n      });\n    default:\n      return state;\n  }\n};\n\nexport default itemReducer;\n\n// if (state.cartItems.length > 0) {\n//   state.cartItems[idx].quantity = action.payload.quantity;\n// }\n// 방법 1\n// itemId 가 동일한 요소의 위치를 찾아서 그 부분만 바꿔준다.\n// state.cartItems[idx].quantity = action.payload.quantity\n// 방법 2\n// const modifiedArray = state.cartItems.map((item) =>\n//   item.itemId === action.payload.itemId\n//     ? { ...item, quantity: action.payload.quantity }\n//     : item\n// );\n// {} 를 쓰고 state, {...} 를 기입하면, 같은 속성을 가진 객체 병합\n// 파라미터 순서에서 더 뒤에 위치한 동일한 속성을 가진 다른 객체에 의해 덮어쓰여짐.\n","import { ENQUEUE_NOTIFICATION, DEQUEUE_NOTIFICATION } from \"../actions/index\";\nimport { initialState } from \"./initialState\";\n\nconst notificationReducer = (state = initialState, action) => {\n  //! action 의 type(ADD_TO_CART 등) 에 따라서 특정 동작을 수행한다. => 특정 동작? state 를 변경해주는 것.\n  //! type 과 payload(quantity, id) 등을 받아와 아래 동작을 수행.\n\n  switch (action.type) {\n    case ENQUEUE_NOTIFICATION:\n      //! 기존의 initialState 의 notification 에 새로운 액션 내용을 추가한다.\n      //! action.payload { message, dismissTime, uuid, },\n      return Object.assign({}, state, {\n        notifications: [...state.notifications, action.payload],\n      });\n    case DEQUEUE_NOTIFICATION:\n      //! notification 중 가장 첫번째 요소를 제거한 새로운 배열로 상태를 변경한다.\n      return Object.assign({}, state, {\n        notifications: state.notifications.slice(1),\n      });\n    default:\n      return state;\n  }\n};\n\nexport default notificationReducer;\n","import { combineReducers } from 'redux';\nimport itemReducer from './itemReducer';\nimport notificationReducer from './notificationReducer';\n\nconst rootReducer = combineReducers({\n  itemReducer,\n  notificationReducer\n});\n\nexport default rootReducer;","import { compose, createStore, applyMiddleware } from \"redux\";\r\nimport rootReducer from \"../reducers/index\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n  ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({})\r\n  : compose;\r\n//! createStore 메소드를 활용해 reducer를 연결하는 방법인데요,\r\n//! createStore와 더불어 다른 리듀서의 조합을 인자로 넣어서 스토어를 생성\r\n//! 이 경우, 비동기 액션을 구현하기 위해 thunk 미들웨어를 사용한다.\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(thunk))\r\n);\r\n\r\nexport default store;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.0/8 are considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport store from './store/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}